# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }

terraform/.github/workflows/
in
master

1

# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file

2

# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run

3

# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events

4

# to the master branch, `terraform apply` will be executed.

5

#

6

# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

7

#

8

# To use this workflow, you will need to complete the following setup steps.

9

#

10

# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.

11

#   Example `main.tf`:

12

#     # The configuration for the `remote` backend.

13

#     terraform {

14

#       backend "remote" {

15

#         # The name of your Terraform Cloud organization.

16

#         organization = "example-organization"

17

#

18

#         # The name of the Terraform Cloud workspace to store Terraform state files in.

19

#         workspaces {

20

#           name = "example-workspace"

21

#         }

22

#       }

23

#     }

24

#

25

#     # An example resource that does nothing.

26

#     resource "null_resource" "example" {

27

#       triggers = {

28

#         value = "A example resource that does nothing!"

29

#       }

30

#     }

31

#

32

#

33

# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.

34

#   Documentation:

35

#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html

36

#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets

37

#

38

# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.

39

#   Example:

40

#     - name: Setup Terraform

41

#       uses: hashicorp/setup-terraform@v1

42

#       with:

43

#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

44

​

45

name: 'Terraform'

46

​

Use Control + Space to trigger autocomplete in most situations.
Featured Actions

Cache artifacts like dependencies and build outputs to improve workflow execution time
1.8k

Setup a Node.js environment by adding problem matchers and optionally downloading and adding it to the PATH
1k

Close issues and pull requests with no recent activity
359

Download a build artifact that was previously uploaded in the workflow by the upload-artifact action
283

Set up a specific version of the .NET Core CLI in the PATH and set up authentication to a private NuGet repository
265
Featured categories
Browse all actions on the GitHub Marketplace

#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: ssh-add
      run: |
        echo "${{ secrets.GITHUB_SSH_PRIVATE_KEY }}" > id_rsa
        ssh-keyscan github.com > known_hosts
        chmod 400 id_rsa known_hosts

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
